@page "/reset-password"
@using Microsoft.AspNetCore.WebUtilities
@using System.ComponentModel.DataAnnotations
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject Blazored.Toast.Services.IToastService ToastService

<PageTitle>Reset Password</PageTitle>

<div class="auth-page">
    <div class="auth-card">
        <h3 class="text-center mb-4">Reset Your Password</h3>

        @if (string.IsNullOrEmpty(errorMessage))
        {
            <EditForm Model="@model" OnValidSubmit="HandleReset">
                <DataAnnotationsValidator />
                <div class="mb-3">
                    <label class="form-label">New Password</label>
                    <InputText class="form-control" @bind-Value="model.Password" type="password" />
                    <ValidationMessage For="@(() => model.Password)" />
                </div>
                <div class="mb-3">
                    <label class="form-label">Confirm New Password</label>
                    <InputText class="form-control" @bind-Value="model.ConfirmPassword" type="password" />
                    <ValidationMessage For="@(() => model.ConfirmPassword)" />
                </div>
                <button class="btn btn-primary w-100" type="submit" disabled="@isBusy">
                    @if (isBusy)
                    {
                        <span class="spinner-border spinner-border-sm"></span>
                        <span> Resetting...</span>
                    }
                    else
                    {
                        <span>Reset Password</span>
                    }
                </button>
            </EditForm>
        }
        else
        {
            <div class="alert alert-danger">@errorMessage</div>
            <a href="/login">Return to Login</a>
        }
    </div>
</div>

@code {
    private ResetPasswordModel model = new();
    private string? errorMessage;
    private bool isBusy = false;

    protected override void OnInitialized()
    {
        var uri = new Uri(NavigationManager.Uri);
        var queryStrings = QueryHelpers.ParseQuery(uri.Query);

        if (queryStrings.TryGetValue("email", out var email) && queryStrings.TryGetValue("token", out var token))
        {
            model.Email = email;
            model.Token = token;
        }
        else
        {
            errorMessage = "Invalid password reset link. The URL is missing required information.";
        }
    }

    private async Task HandleReset()
    {
        isBusy = true;
        try
        {
            var response = await Http.PostAsJsonAsync("api/auth/reset-password", model);
            if (response.IsSuccessStatusCode)
            {
                ToastService.ShowSuccess("Your password has been reset successfully. Please log in with your new password.");
                NavigationManager.NavigateTo("/login");
            }
            else
            {
                errorMessage = "Failed to reset password. The link may be invalid or expired. Please try again.";
            }
        }
        catch
        {
            errorMessage = "An unexpected error occurred. Please try again later.";
        }
        finally
        {
            isBusy = false;
        }
    }

    public class ResetPasswordModel
    {
        public string Email { get; set; } = string.Empty;
        public string Token { get; set; } = string.Empty;

        [Required]
        [MinLength(6, ErrorMessage = "Password must be at least 6 characters long.")]
        public string Password { get; set; } = string.Empty;

        [Required]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = string.Empty;
    }
}