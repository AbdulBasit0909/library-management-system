@page "/profile"
@using LibraryManagement.Web.Models
@using System.Text.Json
@inject HttpClient Http
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject Blazored.Toast.Services.IToastService ToastService

<PageTitle>My Profile</PageTitle>

@if (isAuthorized)
{
    <h3><i class="bi bi-person-circle"></i> My Profile</h3>
    <p>Manage your account settings and change your password.</p>
    <hr />

    <div class="card shadow-sm" style="max-width: 600px;">
        <div class="card-header">
            <h4>Change Password</h4>
        </div>
        <div class="card-body">
            <EditForm Model="@changePasswordModel" OnValidSubmit="HandlePasswordChange">
                <DataAnnotationsValidator />
                <div class="mb-3">
                    <label class="form-label">Current Password</label>
                    <InputText type="password" class="form-control" @bind-Value="changePasswordModel.CurrentPassword" />
                    <ValidationMessage For="@(() => changePasswordModel.CurrentPassword)" />
                </div>
                <div class="mb-3">
                    <label class="form-label">New Password</label>
                    <InputText type="password" class="form-control" @bind-Value="changePasswordModel.NewPassword" />
                    <ValidationMessage For="@(() => changePasswordModel.NewPassword)" />
                </div>
                <div class="mb-3">
                    <label class="form-label">Confirm New Password</label>
                    <InputText type="password" class="form-control" @bind-Value="changePasswordModel.ConfirmNewPassword" />
                    <ValidationMessage For="@(() => changePasswordModel.ConfirmNewPassword)" />
                </div>
                <button type="submit" class="btn btn-primary" disabled="@isLoading">
                    @if (isLoading)
                    {
                        <span class="spinner-border spinner-border-sm"></span>
                        <span> Updating...</span>
                    }
                    else
                    {
                        <span>Update Password</span>
                    }
                </button>
            </EditForm>
        </div>
    </div>
}
else
{
    <p>You must be logged in to view your profile.</p>
}

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    private bool isAuthorized = false;
    private bool isLoading = false;
    private ChangePasswordModel changePasswordModel = new();

    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationStateTask;
        var user = authState.User;
        if (user.Identity != null && user.Identity.IsAuthenticated)
        {
            isAuthorized = true;
        }
    }

    private async Task HandlePasswordChange()
    {
        isLoading = true;
        var response = await Http.PostAsJsonAsync("api/auth/change-password", changePasswordModel);
        if (response.IsSuccessStatusCode)
        {
            ToastService.ShowSuccess("Password changed successfully!");
            changePasswordModel = new();
        }
        else
        {
            try
            {
                var errorResponse = await response.Content.ReadFromJsonAsync<ErrorResponse>();
                ToastService.ShowError(string.Join("\n", errorResponse?.Errors ?? new List<string> { "An unknown error occurred." }));
            }
            catch
            {
                ToastService.ShowError("An unknown error occurred while changing the password.");
            }
        }
        isLoading = false;
    }

    private class ErrorResponse
    {
        public List<string> Errors { get; set; } = new();
    }
}