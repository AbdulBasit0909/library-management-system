@page "/login"
@using System.ComponentModel.DataAnnotations
@using System.Net.Http.Json
@using System.Security.Claims
@using System.Text.Json.Serialization
@using Microsoft.AspNetCore.Components.Authorization
@using LibraryManagement.Web.Auth
@using Blazored.LocalStorage


@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject ILocalStorageService LocalStorage
@inject AuthenticationStateProvider AuthenticationStateProvider

<div class="login-page">
    <div class="card shadow-sm login-card">
        <div class="card-body">
            <h3 class="text-center mb-4">Login to Your Account</h3>

            <EditForm Model="@loginModel" OnValidSubmit="HandleLogin">
                <DataAnnotationsValidator />

                <div class="mb-3">
                    <label for="username" class="form-label">Username</label>
                    <InputText id="username" class="form-control" @bind-Value="loginModel.Username" />
                </div>

                <div class="mb-3">
                    <label for="password" class="form-label">Password</label>
                    <InputText id="password" type="password" class="form-control" @bind-Value="loginModel.Password" />
                </div>

                <button type="submit" class="btn btn-primary w-100" disabled="@isLoading">
                    @if (isLoading)
                    {
                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                        <span> Logging in...</span>
                    }
                    else
                    {
                        <span>Login</span>
                    }
                </button>
                <!-- --- ADD THIS DIV --- -->
                <div class="text-center mt-3">
                    <a href="/forgot-password">Forgot Password?</a>
                </div>
                <!-- --- END OF ADDITION --- -->
                  <!-- --- THIS IS THE NEWLY ADDED SECTION --- -->
            <hr />
            <div class="mt-3 text-center">
                <span>Don't have an account? </span>
                <a href="/register">Register here</a>
            </div>
            <!-- --- END OF NEW SECTION --- -->
            </EditForm>

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger mt-3">@errorMessage</div>
            }
        </div>
    </div>
</div>

@code {
    private LoginModel loginModel = new();
    private string? errorMessage;
    private bool isLoading = false;

    private async Task HandleLogin()
    {
        isLoading = true;
        errorMessage = null;

        try
        {
            var response = await Http.PostAsJsonAsync("api/Auth/login", loginModel);

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<LoginResult>();
                await LocalStorage.SetItemAsync("authToken", result.Token);

                var authProvider = (ApiAuthenticationStateProvider)AuthenticationStateProvider;
                authProvider.MarkUserAsAuthenticated(result.Token);

                var claims = authProvider.ParseClaimsFromJwt(result.Token);
                var role = claims.FirstOrDefault(c =>
     c.Type == ClaimTypes.Role ||
     c.Type == "role" ||
     c.Type.EndsWith("/role"))?.Value;

            
                switch (role)
                {
                    case "Librarian":
                        NavigationManager.NavigateTo("/librarian/dashboard", true);
                        break;
                    case "Teacher":
                        NavigationManager.NavigateTo("/teacher/dashboard", true);
                        break;
                    case "Student":
                        NavigationManager.NavigateTo("/student/dashboard", true);
                        break;
                    default:
                        NavigationManager.NavigateTo("/", true);
                        break;
                }
            }
            else
            {
                errorMessage = "Invalid username or password.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
        }

        isLoading = false;
    }

    public class LoginModel
    {
        [Required] public string Username { get; set; } = "";
        [Required] public string Password { get; set; } = "";
    }
    public class LoginResult
    {
        [JsonPropertyName("token")]
        public string Token { get; set; } = "";
    }
}
