@page "/books"
@using LibraryManagement.Web.Models
@using LibraryManagement.Web.Components
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject Blazored.Toast.Services.IToastService ToastService

<PageTitle>Manage Books</PageTitle>

@if (isAuthorized)
{
    <h3><i class="bi bi-book-half"></i> Manage Book Catalog</h3>
    <hr />

    <div class="mb-3">
        <a href="/books/add" class="btn btn-success">
            <i class="bi bi-plus-circle-fill"></i> Add New Book
        </a>
    </div>

    @if (pagedResult == null)
    {
        <p><em>Loading books...</em></p>
    }
    else
    {
        <table class="table table-striped table-hover shadow-sm">
            <thead class="table-dark">
                <tr>
                    <th>Title</th>
                    <th>Author</th>
                    <th>Quantity</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var book in pagedResult.Items)
                {
                    <tr>
                        <td>@book.Title</td>
                        <td>@book.Author</td>
                        <td>@book.Quantity</td>
                        <td>
                            <a href="@($"/books/edit/{book.Id}")" class="btn btn-sm btn-primary">
                                <i class="bi bi-pencil-fill"></i> Edit
                            </a>
                            <button class="btn btn-sm btn-danger" @onclick="() => DeleteBook(book.Id)">
                                <i class="bi bi-trash-fill"></i> Delete
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>

        <Pagination CurrentPage="@pagedResult.CurrentPage"
                    TotalPages="@pagedResult.TotalPages"
                    OnPageChanged="HandlePageChanged" />
    }
}
else
{
    <p>You are not authorized to view this page. You must be a Librarian.</p>
}


@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    private bool isAuthorized = false;

    private PagedResult<Book>? pagedResult;
    private int currentPage = 1;

    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationStateTask;
        var user = authState.User;
        if (user.Identity != null && user.Identity.IsAuthenticated && user.IsInRole("Librarian"))
        {
            isAuthorized = true;
            await LoadBooks();
        }
    }

    private async Task LoadBooks()
    {
        try
        {
            pagedResult = await Http.GetFromJsonAsync<PagedResult<Book>>($"api/Books?pageNumber={currentPage}");
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Failed to load books: {ex.Message}");
        }
    }

    private async Task HandlePageChanged(int newPageNumber)
    {
        currentPage = newPageNumber;
        await LoadBooks();
    }

    private async Task DeleteBook(int bookId)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this book?");
        if (confirmed)
        {
            var response = await Http.DeleteAsync($"api/Books/{bookId}");
            if (response.IsSuccessStatusCode)
            {
                ToastService.ShowSuccess("Book deleted successfully!");
                await LoadBooks(); // Refresh the list
            }
            else
            {
                var errorContent = await response.Content.ReadFromJsonAsync<ErrorResponse>();
                ToastService.ShowError(errorContent?.Message ?? "Failed to delete book.");
            }
        }
    }

    private class ErrorResponse
    {
        public string Message { get; set; }
    }
}